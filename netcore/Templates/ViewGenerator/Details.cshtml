@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
    @:Layout = "~/Views/Shared/_AdminlteNetcoreDetails.cshtml";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:

@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}

@{ 

    var primaryKeyName = "";

    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.IsPrimaryKey)
        {

            primaryKeyName = property.PropertyName;
        }

    }


@:<div class="row">
@:    <div class="col-md-9">
@:        <!-- Default box -->
@:        <div class="box box-primary">
@:            <div class="box-body">
@:                <div>
@:                      <dl class="dl-horizontal">

    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey && !property.PropertyName.Equals("HasChild"))
        {
                          <dt>
                              @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                          </dt>
                          <dd>
                              @@Html.DisplayFor(model => model.@GetValueExpression(property))
                          </dd>
        }
    }
    foreach (var navigation in Model.ModelMetadata.Navigations)
    {
                          <dt>
                              @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                          </dt>
                          <dd>
                              @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                          </dd>
    }

@:                      </dl>                                   
@:                </div>
@:            </div>
@:            <!-- /.box-body -->
@:            <div class="box-footer">
@:                <div class="form-group">
@:                    <a asp-action="Edit" asp-route-id="@@Model.@primaryKeyName" class="btn btn-primary">Edit</a>
@:                    <a asp-action="Index" class="btn btn-default">Back to List</a>
@:                </div>
@:            </div>
@:            <!-- /.box-footer-->
@:        </div>
@:        <!-- /.box -->
@:    </div>
@:    <div class="col-md-3">
@:    </div>
@:</div>
}


@{ 
    bool HasChild = false;
    string entityName = Model.ModelMetadata.EntitySetName + "Line";

    foreach (var property in Model.ModelMetadata.Properties)
    {
        string name = property.PropertyName;
        if (name.Contains("HasChild"))
        {
            HasChild = true;

        }
    }

    if (HasChild)
    {


@:<div class="row">
@:    <div class="col-md-9">
@:        <!-- Default box -->
@:        <div class="box box-primary">
@:
@:            <div class="box-body">
@:                <div class="row">
@:                    <div class="col-lg-12">
@:                        <table id="grid" name="grid" class="table table-striped table-bordered">
@:                            <thead>
@:                                <tr>
@:                                    <th class="col-lg-11">Product</th>
@:                                    <th class="col-lg-1"></th>
@:                                </tr>
@:                            </thead>
@:                        </table>
@:                    </div>
@:                </div>
@:            </div>
@:            <!-- /.box-body -->
@:            <div class="box-footer">
@:                <div class="form-group">
@:                    <div class="row">
@:                        <div class="col-md-12">
@:                            <a class="btn btn-success" style="margin-bottom:10px" onclick="ShowPopup('@@Url.Action("Create","@entityName")')"><i class="fa fa-plus"></i> Add New @entityName</a>
@:                        </div>
@:                    </div>
@:                </div>
@:            </div>
@:            <!-- /.box-footer-->
@:        </div>
@:        <!-- /.box -->
@:    </div>
@:    <div class="col-md-3">
@:
@:    </div>
@:</div>
@:
@:
@:
@:    <!--modal placeholder-->
@:    <div class="modal modal-primary fade" id="modalDefault">
@:        <div class="modal-dialog">
@:            <div class="modal-content">
@:            </div>
@:        </div>
@:    </div>


@:@@section Scripts{
      <script>
        var popup, dataTable;
        var entity = '@Model.ModelMetadata.EntitySetName' + 'Line';
        var apiurl = '/api/' + entity;

        $(document).ready(function () {
            dataTable = $('#grid').DataTable({
                "ajax": {
                    "url": apiurl,
                    "type": 'GET',
                    "datatype": 'json'
                },
                "columns": [
                    { "data": "description" },
                    {
                        "data": "@Model.ModelMetadata.EntitySetName" + "LineId",
                        "render": function (data) {
                            var btnEdit = "<a class='btn btn-default btn-xs' onclick=ShowPopup('/" + entity + "/AddEdit/" + data + "')><i class='fa fa-pencil'></i></a>";
                            var btnDelete = "<a class='btn btn-danger btn-xs' style='margin-left:2px' onclick=Delete('" + data + "')><i class='fa fa-trash'></i></a>";
                            return btnEdit + btnDelete;
                        }
                    }
                ],
                "language": {
                    "emptyTable": "no data found."
                },
                "lengthChange": false,
                "info": false,
                "searching": false,
                "paging": false,
            });
        });

        function ShowPopup(url) {
            var modalId = 'modalDefault';
            var modalPlaceholder = $('#' + modalId + ' .modal-dialog .modal-content');
            $.get(url)
                .done(function (response) {
                    modalPlaceholder.html(response);
                    popup = $('#' + modalId + '').modal({
                        keyboard: false,
                        backdrop: 'static'
                    });
                });
        }


        function SubmitAddEdit(form) {
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                var data = $(form).serializeJSON();
                data = JSON.stringify(data);
                $.ajax({
                    type: 'POST',
                    url: apiurl,
                    data: data,
                    contentType: 'application/json',
                    success: function (data) {
                        if (data.success) {
                            popup.modal('hide');
                            ShowMessage(data.message);
                            dataTable.ajax.reload();
                        } else {
                            ShowMessageError(data.message);
                        }
                    }
                });

            }
            return false;
        }

        function Delete(id) {
            swal({
                title: "Are you sure want to Delete?",
                text: "You will not be able to restore the data!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dd4b39",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: true
            }, function () {
                $.ajax({
                    type: 'DELETE',
                    url: apiurl + '/' + id,
                    success: function (data) {
                        if (data.success) {
                            ShowMessage(data.message);
                            dataTable.ajax.reload();
                        } else {
                            ShowMessageError(data.message);
                        }
                    }
                });
            });


        }

      </script>
@:}



    }

}

@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
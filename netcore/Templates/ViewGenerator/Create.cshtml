@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName


@{
    string entitySetName = Model.ModelMetadata.EntitySetName;
    string masterEntity = entitySetName.Replace("Line", "");
    string masterEntityCamelCase = Char.ToLowerInvariant(masterEntity[0]) + masterEntity.Substring(1);
    string masterFKId = masterEntityCamelCase + "Id";

    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
    if (entitySetName.Contains("Line"))
    {
    @:Layout = "~/Views/Shared/_AdminlteNetcorePopup.cshtml";
    } else
    {
    @:Layout = "~/Views/Shared/_AdminlteNetcoreCreate.cshtml";

    }
    
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:

@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }

@:<div class="row">
    @:<div class="col-md-12">
            
            @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
    foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
    {

        if (property.IsPrimaryKey)
            {
            @:<input type="hidden" asp-for="@property.PropertyName" />
                continue;
            }


        string name = property.PropertyName;

        if (property.Scaffold &&
            !property.IsAutoGenerated &&
            !property.IsReadOnly &&
            !(name.Equals("HasChild") || name.Equals("createdAt")))
        {

            

            if (property.IsForeignKey && entitySetName.Contains("Line") && masterFKId.Equals(property.PropertyName))
            {
            @:<div class="form-group hidden">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<select asp-for="@property.PropertyName" class ="form-control select2" asp-items="ViewBag.@property.PropertyName"></select>
            @:</div>
                    continue;
            }

            if (property.IsForeignKey && !masterFKId.Equals(property.PropertyName))
            {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<select asp-for="@property.PropertyName" class ="form-control select2" asp-items="ViewBag.@property.PropertyName"></select>
            @:</div>
                    continue;
            }


            if (property.TypeName.Equals("System.DateTime")) {

            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<div class="input-group date">
                    @:<div class="input-group-addon">
                        @:<i class="fa fa-calendar"></i>
                    @:</div>
                    @:<input asp-for="@property.PropertyName" class="form-control pull-right datepicker" type="text"/>
                @:</div>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                continue;
            }


            bool isCheckbox = property.TypeName.Equals("System.Boolean");
            if (isCheckbox)
            {
            @:<div class="form-group">
                @:<div class="checkbox">
                    @:<label>
                        @:<input asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                    @:</label>
                @:</div>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<select asp-for="@property.PropertyName" class="form-control select2" asp-items="Html.GetEnumSelectList<@property.TypeName>()"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else
                {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label"></label>
                @:<input asp-for="@property.PropertyName" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
        }
        }
           
        
    </div>
</div>



@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetEnumType(string propertyName)
    {
        return Char.ToUpperInvariant(propertyName[0]) + propertyName.Substring(1);

    }
}